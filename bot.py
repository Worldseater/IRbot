from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests, asyncio
from datetime import datetime
from config import BOT_TOKEN, OPENWEATHER_API_KEY, CHAT_ID, CITY, WEATHER_HOUR, WEATHER_MINUTE
from ICON_EMOJI import ICON_EMOJI

bot = Bot(BOT_TOKEN)
dp = Dispatcher()  # –≤ v3 Bot –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ø–æ–≥–æ–¥—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ 13:00 –∏ 19:00 ====
def get_full_weather():
    # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
    url_now = f"https://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    now = requests.get(url_now).json()

    icon_now = now["weather"][0]["icon"]
    emoji_now = ICON_EMOJI.get(icon_now, "")
    weather_now = f"{now['weather'][0]['description'].capitalize()} {emoji_now}"

    temp_now = round(now["main"]["temp"])
    feels_now = round(now["main"]["feels_like"])
    temp_min = round(now["main"]["temp_min"])
    temp_max = round(now["main"]["temp_max"])
    humidity = now["main"]["humidity"]
    pressure = now["main"]["pressure"]
    wind_speed = now["wind"]["speed"]
    wind_deg = now["wind"]["deg"]
    gust = now["wind"].get("gust", 0)
    clouds = now["clouds"]["all"]
    rain = now.get("rain", {}).get("1h", 0)
    snow = now.get("snow", {}).get("1h", 0)
    sunrise = datetime.fromtimestamp(now["sys"]["sunrise"]).strftime("%H:%M")
    sunset = datetime.fromtimestamp(now["sys"]["sunset"]).strftime("%H:%M")

    # –ü—Ä–æ–≥–Ω–æ–∑
    url_forecast = f"https://api.openweathermap.org/data/2.5/forecast?q={CITY}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    forecast = requests.get(url_forecast).json()

    today = datetime.now().date()
    forecast_hours = [13, 19]  # –ß–∞—Å—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑
    forecast_texts = []

    for target_hour in forecast_hours:
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∫ target_hour
        closest_item = min(
            (item for item in forecast["list"] if datetime.fromisoformat(item["dt_txt"]).date() == today),
            key=lambda x: abs(int(x["dt_txt"][11:13]) - target_hour),
            default=None
        )
        if closest_item:
            temp = round(closest_item["main"]["temp"])
            feels = round(closest_item["main"]["feels_like"])
            icon_fc = closest_item["weather"][0]["icon"]
            emoji_fc = ICON_EMOJI.get(icon_fc, "")
            weather_desc = f"{closest_item['weather'][0]['description']} {emoji_fc}"
            wind_speed_fc = closest_item["wind"]["speed"]
            wind_deg_fc = closest_item["wind"]["deg"]
            humidity_fc = closest_item["main"]["humidity"]
            pop = int(closest_item.get("pop", 0) * 100)

            forecast_texts.append(
                f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {target_hour:02d}:00:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:+}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels:+}¬∞C)\n"
                f"–ü–æ–≥–æ–¥–∞: {weather_desc}\n"
                f"–í–µ—Ç–µ—Ä: {wind_speed_fc} –º/—Å, {wind_deg_fc}¬∞\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity_fc}%\n"
                f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {pop}%\n"
            )

    message = (
        f"–ì–æ—Ä–æ–¥: {CITY}\n\n"
        f"–ü–æ–≥–æ–¥–∞: {weather_now}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_now:+}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_now:+}¬∞C)\n"
        f"–ú–∏–Ω–∏–º—É–º/–ú–∞–∫—Å–∏–º—É–º: {temp_min:+}¬∞C / {temp_max:+}¬∞C\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n"
        f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {wind_deg}¬∞ (–ø–æ—Ä—ã–≤—ã –¥–æ {gust} –º/—Å)\n"
        f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%\n"
        f"–û—Å–∞–¥–∫–∏: –¥–æ–∂–¥—å {rain} –º–º, —Å–Ω–µ–≥ {snow} –º–º\n\n"
        f"–†–∞—Å—Å–≤–µ—Ç: {sunrise}\n"
        f"–ó–∞–∫–∞—Ç: {sunset}\n\n"
    )
    message += "\n".join(forecast_texts)
    return message

# ==== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ====
async def send_weather():
    message = get_full_weather()
    await bot.send_message(CHAT_ID, message)

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ====
@dp.message(Command("start"))
async def start_message(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∫–∞–Ω–∞–ª", callback_data="send_channel")]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ====
@dp.callback_query(lambda c: c.data == "send_channel")
async def callback_send_channel(callback_query: CallbackQuery):
    await send_weather()
    await callback_query.answer("–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
async def main():
    scheduler.add_job(send_weather, "cron", hour=WEATHER_HOUR, minute=WEATHER_MINUTE)
    scheduler.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
